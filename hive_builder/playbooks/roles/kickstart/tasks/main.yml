---
- name: create directory
  file:
    path: "{{ hive_context_dir }}/iso"
    state: directory
    mode: 0755
- name: mount source iso image
  become: True
  mount:
    path: "{{ hive_temp_dir }}/iso"
    src: "{{ hive_kickstart_config.iso_src }}"
    fstype: iso9660
    opts: ro,noauto,loop
    state: mounted
  when: hive_kickstart_config.iso_src is defined and ansible_distribution != 'MacOSX'
- name: copy all contents of iso file system
  synchronize:
    src: "{{ hive_temp_dir }}/iso"
    dest: "{{ hive_context_dir }}/"
  when: hive_kickstart_config.iso_src is defined and ansible_distribution != 'MacOSX'
- name: create directory
  file:
    path: "{{ hive_context_dir }}/{{ item }}"
    state: directory
    mode: 0755
  loop:
  - iso
  - iso/isolinux
  - iso/EFI/BOOT
- name: unmount source iso image
  become: True
  mount:
    path: "{{ hive_temp_dir }}/iso"
    src: "{{ hive_kickstart_config.iso_src }}"
    fstype: iso9660
    opts: ro,noauto,loop
    state: unmounted
  when: hive_kickstart_config.iso_src is defined and ansible_distribution != 'MacOSX'
- name: put kickstart files
  template:
    src: kickstart.j2
    dest: "{{ hive_context_dir }}/iso/{{ ks_host.split('.')[0] }}.ks"
  loop: "{{ groups['servers'] | intersect(groups[hive_stage] )}}"
  loop_control:
    loop_var: ks_host
    index_var: ks_idx
- name: insert menu item into menu for BIOS base machine
  blockinfile:
    path: "{{ hive_context_dir }}/iso/isolinux/isolinux.cfg"
    insertbefore: label linux
    block: |
      label kickstart
        menu label ^Kickstart HiveInstaller for {{ ks_host }}
        kernel vmlinuz
        append initrd=initrd.img inst.stage2=hd:LABEL=HiveInstaller inst.repo={{ hive_ks_media }}:/ inst.ks={{ hive_ks_media }}:/{{ ks_host.split('.')[0] }}.ks net.ifnames=0
    marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ ks_host }}"
  loop: "{{ groups['servers'] | intersect(groups[hive_stage] )}}"
  loop_control:
    loop_var: ks_host
  when: hive_kickstart_config.iso_src is defined and ansible_distribution != 'MacOSX'
- name: insert menu item into menu for UEFI base machine
  blockinfile:
    path: "{{ hive_context_dir }}/iso/EFI/BOOT/grub.cfg"
    insertbefore: "menuentry 'Test this media.*"
    block: |
      menuentry 'Install kickstart HiveInstaller for {{ ks_host }}' --class fedora --class gnu-linux --class gnu --class os {
        linuxefi /images/pxeboot/vmlinuz inst.stage2=hd:LABEL=HiveInstaller inst.repo={{ hive_ks_media }}:/ inst.ks={{ hive_ks_media }}:/{{ ks_host.split('.')[0] }}.ks
        initrdefi /images/pxeboot/initrd.img
      }
    marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ ks_host }}"
  loop: "{{ groups['servers'] | intersect(groups[hive_stage] )}}"
  loop_control:
    loop_var: ks_host
  when: hive_kickstart_config.iso_src is defined and ansible_distribution != 'MacOSX'
- name: generate usb image
  shell: |
    hdiutil makehybrid -iso -joliet -o {{ hive_context_dir }}/ks.iso {{ hive_context_dir }}/iso
  args:
    creates: "{{ hive_context_dir }}/ks.iso"
  when: ansible_distribution == 'MacOSX'
- name: write ISO image
  become: True
  shell: |
    xorriso -as mkisofs \
    -iso-level 3 -full-iso9660-filenames \
    -output {{ hive_kickstart_config.iso_dest }} \
    -eltorito-boot isolinux/isolinux.bin \
    -eltorito-catalog isolinux/boot.cat \
    -volid 'HiveInstaller' \
    -no-emul-boot -boot-load-size 4 -boot-info-table \
    -eltorito-alt-boot -e images/efiboot.img \
    -no-emul-boot -isohybrid-gpt-basdat ./
  args:
    chdir: "{{ hive_context_dir }}/iso"
  when: hive_kickstart_config.iso_dest is defined and ansible_distribution != 'MacOSX'
- name: put ssh_config
  blockinfile:
    dest: "{{ hive_context_dir }}/ssh_config"
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ setup_host }}"
    state: present
    create: yes
    mode: 0644
    block: |
      Host {{ setup_host }}
        HostName {{ hostvars[setup_host].hive_private_ip }}
        UserKnownHostsFile /dev/null
        User {{ hostvars[setup_host].hive_safe_admin }}
        StrictHostKeyChecking no
        PasswordAuthentication no
        IdentityFile {{ hive_safe_private_key_path }}
        IdentitiesOnly yes
        LogLevel FATAL
  loop: "{{ groups['servers'] | intersect(groups[hive_stage] )}}"
  loop_control:
    loop_var: setup_host
