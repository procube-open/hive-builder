---
- name: download images
  gather_facts: False
  hosts: hives
  vars:
    hive_safe_images: "{%if hive_limit is defined %}{{ groups['images'] | intersect(groups[hive_stage]) | intersect(hive_limit.split(',') | map('regex_replace', '^(.*)$', 'image_\\1') | list) | list}}{% else %}{{ groups['images']  | intersect(groups[hive_stage]) | list }}{% endif %}"
    ansible_python_interpreter: "{{ hive_home_dir }}/docker/bin/python"

  tasks:
  - name: login to private registry
    docker_login:
      registry: "{{ hive_registry }}"
      username: "{{ hive_safe_docker_login_user }}"
      password: "{{ lookup('password', hive_context_dir + '/registry_password length=15') }}"
      email: "{{ hive_safe_email }}"
  - name: pull docker images
    docker_image:
      name: "{{ hive_registry }}/{{ item }}:latest"
      # If you add the repository parameter, this module add an unnecessary tag like hive2.pdns:5000
      # Do not add repository: "{{ hive_registry }}"
      source: pull
      force_source: True
    loop: "{{ hive_safe_images }}"
    register: hive_safe_pull_result

- name: deploy services
  gather_facts: False
  hosts: first_hive
  vars:
    ansible_python_interpreter: "{{ hive_home_dir }}/docker/bin/python"
    hive_safe_services: "{%if hive_limit is defined %}{{ groups['services'] | intersect(groups[hive_stage]) | intersect(hive_limit.split(',')) | list}}{% else %}{{ groups['services'] | intersect(groups[hive_stage]) | list}}{% endif %}"

  tasks:
  - name: deploy service
    docker_swarm_service:
      name: "{{ item }}"
      hostname: "{{ item }}"
      restart_config: "{{ hostvars[item].restart_config | default(omit) }}"
      image: "{{ hostvars[item].hive_image | default( hive_registry + '/' + (hostvars[item].hive_image_name | default('')) + ':latest') }}"
      # Docker calls it command, but swarmkit calls it args
      args: "{{ hostvars[item].hive_command | default(omit) }}"
      # Docker calls it entrypoint, but swarmkit calls it command
      command: "{{ hostvars[item].hive_entrypoint | default(omit) }}"
      env: "{{ hostvars[item].hive_environment | default(omit) }}"
      publish: "{{ hostvars[item].hive_ports | default(omit) }}"
      mounts: "{{ hostvars[item].hive_volumes | default(omit) }}"
      labels: "{{ hostvars[item].hive_labels | default(omit) }}"
      mode: "{{ hostvars[item].hive_mode | default(omit) }}"
      endpoint_mode: "{{ hostvars[item].hive_endpoint_mode | default(omit) }}"
      networks: "{{ groups['networks'] }}"
      force_update: "{{ hostvars[item].hive_image_name is defined and (groups['hives'] | map('extract', hostvars, ['hive_safe_pull_result', 'results']) | select('defined') | flatten | selectattr('item', 'eq', hostvars[item].hive_image_name) | select('changed') | list | length) > 0 }}"
      state: "{% if hive_destroy  | default(false) %}absent{% else %}present{% endif %}"
    loop: "{{ hive_safe_services }}"
    register: swarm_service

