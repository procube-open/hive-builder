---
- name: build container images
  gather_facts: False
  hosts: repository
  vars:
    ansible_python_interpreter: "{{ hive_home_dir }}/docker/bin/python"

  tasks:
  - name: login to private repository
    docker_login:
      registry: "{{ hive_registry }}"
      username: "{{ hive_safe_docker_login_user }}"
      password: "{{ lookup('password', hive_context_dir + '/registry_password length=15') }}"
#     email attribute of docker_login has been removed in community.docker 2.0.0.
#     cause error: Unsupported parameters for (docker_login) module: email.
#       email: "{{ hive_safe_email }}"
# move "login to external repository" task for repository server to zabbix role in setup-hosts phase
# to avoid toomanyrequests error occur when docker-compose up
- name: build images
  hosts: images
  gather_facts: False
  serial: 3
  connection: docker
  vars:
    hive_safe_repository_server: "{{ groups['repository'] | intersect(groups[hive_stage]) | first }}"
    hive_safe_images_dir: "{{ hostvars[hive_safe_repository_server].hive_home_dir }}/images"
    hive_safe_sleep_command: /bin/sh -c 'trap "kill %1" int;sleep 2400 &wait'
    ansible_docker_extra_args: "-H unix://{{ hive_temp_dir }}/docker.sock@{{ groups['repository'] | intersect(groups[hive_stage]) | first }}"
    hive_safe_image_tag: "{{hostvars[hive_safe_repository_server].hive_registry}}/{{ inventory_hostname }}:{{ lookup('pipe', 'date +\"%Y%m%d%H%M%S\"') }}"
    hive_safe_image_tag_latest: "{{hostvars[hive_safe_repository_server].hive_registry}}/{{ inventory_hostname }}:latest"
    tag_mapping_json: "{{ dict() if lookup('first_found', dict(files=[hive_context_dir + '/tag-mapping.json'], skip=true)) == []
      else lookup('file',hive_context_dir + '/tag-mapping.json') | from_json}}"

  tasks:
  - set_fact:
      ansible_connection: smart
      ansible_python_interpreter: "{{ hostvars[hive_safe_repository_server].hive_home_dir }}/docker/bin/python"
    delegate_to: "{{ hive_safe_repository_server }}"
    delegate_facts: True
  - name: gather proxy setting values
    setup:
    delegate_to: "{{ hive_safe_repository_server }}"
    delegate_facts: True
  - set_fact:
      hive_safe_proxy_settings:
        HTTP_PROXY: "{{ hostvars[hive_safe_repository_server].ansible_env.HTTP_PROXY | default('') }}"
        http_proxy: "{{ hostvars[hive_safe_repository_server].ansible_env.http_proxy | default('') }}"
        HTTPS_PROXY: "{{ hostvars[hive_safe_repository_server].ansible_env.HTTPS_PROXY | default('') }}"
        https_proxy: "{{ hostvars[hive_safe_repository_server].ansible_env.https_proxy | default('') }}"
        NO_PROXY: "{{ hostvars[hive_safe_repository_server].ansible_env.NO_PROXY | default('') }}"
        no_proxy: "{{ hostvars[hive_safe_repository_server].ansible_env.no_proxy | default('') }}"
        PIP_CERT: "{{ '/etc/cacert_pip.pem' if hive_http_proxy is defined else omit }}"
        PIP_INDEX_URL: "{{ hostvars[hive_safe_repository_server].ansible_env.PIP_INDEX_URL | default('') }}"
        PIP_TRUSTED_HOST: "{{ hostvars[hive_safe_repository_server].ansible_env.PIP_TRUSTED_HOST | default('') }}"
  - name: create container
    delegate_to: "{{ hive_safe_repository_server }}"
    docker_container:
      image: >-
        {%- if hive_from in tag_mapping_json.keys() -%}
          {{ tag_mapping_json[hive_from] }}
        {%- else -%}
          {{ hive_from }}
        {%- endif -%}
      exposed_ports: "{{ hive_expose | default(omit) }}"
      name: "build_{{ inventory_hostname }}"
      hostname: "{{ inventory_hostname }}"
      env: "{{(hive_env | default({})) | combine(hive_safe_proxy_settings) }}"
      privileged: "{{ hive_privileged | default(omit) }}"
      entrypoint: "{%if hive_standalone | default(False) %}{{omit}}{%else%}[]{%endif%}"
      working_dir: "{{ hive_working_dir | default(omit) }}"
      command: "{%if hive_standalone | default(False) %}{{omit}}{%else%}{{ hive_safe_sleep_command }}{%endif%}"
      stop_signal: "{{ hive_stop_signal | default(omit) }}"
      user: "{{ hive_user | default(omit) }}"
      command_handling: correct
      state: present
    when: hive_stage not in (hive_pull_on | default([]))
  - name: start container
    delegate_to: "{{ hive_safe_repository_server }}"
    docker_container:
      image: >-
        {%- if hive_from in tag_mapping_json.keys() -%}
          {{ tag_mapping_json[hive_from] }}
        {%- else -%}
          {{ hive_from }}
        {%- endif -%}
      exposed_ports: "{{ hive_expose | default(omit) }}"
      name: "build_{{ inventory_hostname }}"
      hostname: "{{ inventory_hostname }}"
      env: "{{(hive_env | default({})) | combine(hive_safe_proxy_settings) }}"
      privileged: "{{ hive_privileged | default(omit) }}"
      entrypoint: "{%if hive_standalone | default(False) %}{{omit}}{%else%}[]{%endif%}"
      working_dir: "{{ hive_working_dir | default(omit) }}"
      command: "{%if hive_standalone | default(False) %}{{omit}}{%else%}{{ hive_safe_sleep_command }}{%endif%}"
      stop_signal: "{{ hive_stop_signal | default(omit) }}"
      user: "{{ hive_user | default(omit) }}"
      command_handling: correct
    changed_when: False
    when: hive_stage not in (hive_pull_on | default([]))
  - name: apply role
    include_role:
      name: "{{ hive_safe_role }}"
    vars:
      ansible_host: "build_{{ inventory_hostname }}"
    loop: "{{ hive_roles }}"
    # assin loop_var to prevent following messages printed when role use loop.
    # [WARNING]: The loop variable 'item' is already in use. You should set the
    # `loop_var` value in the `loop_control` option for the task to something else to
    # avoid variable collisions and unexpected behavior.
    loop_control:
      loop_var: hive_safe_role
    when: hive_stage not in (hive_pull_on | default([]))

  - name: push images
    include_tasks: push-image.yml
    when: hive_stage not in (hive_pull_on | default([]))
