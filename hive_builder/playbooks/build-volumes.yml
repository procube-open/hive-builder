---
- name: create volumes
  gather_facts: False
  hosts: hives
  become: True
  vars:
    hive_safe_drbd_volumes: >-
      {% if hive_limit is defined -%}
        {{ groups['drbd_volumes'] | default([]) | intersect(groups[hive_stage]) | intersect(hive_limit.split(',')  | map('regex_replace', '^(.*)$', 'volume_\1') | list) | list}}
      {% else -%}
        {{ groups['drbd_volumes']  | default([]) | intersect(groups[hive_stage]) | list}}
      {% endif %}
    hive_safe_nfs_volumes: >-
      {% if hive_limit is defined -%}
        {{ groups['nfs_volumes'] | default([]) | intersect(groups[hive_stage]) | intersect(hive_limit.split(',')  | map('regex_replace', '^(.*)$', 'volume_\1') | list) | list}}
      {% else -%}
        {{ groups['nfs_volumes']  | default([]) | intersect(groups[hive_stage]) | list}}
      {% endif %}
    hive_safe_volumes: >-
      {% if hive_limit is defined -%}
        {{ groups['volumes'] | default([]) | intersect(groups[hive_stage]) | intersect(hive_limit.split(',')  | map('regex_replace', '^(.*)$', 'volume_\1') | list) | list}}
      {% else -%}
        {{ groups['volumes']  | default([]) | intersect(groups[hive_stage]) | list}}
      {% endif %}

  tasks:
  - include_role:
      name: drbd-resource
    loop: "{{ hive_safe_drbd_volumes }}"
    loop_control:
      loop_var: hive_safe_volume_host
  - name: create drbd volume
    docker_volume:
      name: "{{ hostvars[item].hive_volume.name }}"
      driver: "local"
      driver_options:
        type: "{{ hostvars[item].hive_volume.drbd.fstype }}"
        device: "/dev/drbd{{ hostvars[item].hive_volume.drbd.device_id }}"
      state: "{% if hive_destroy  | default(false) %}absent{% else %}present{% endif %}"
    loop: "{{ hive_safe_drbd_volumes }}"
    vars:
      ansible_python_interpreter: "{{ hive_home_dir }}/docker/bin/python"
  - include_role:
      name: "nfs-{{ hive_provider }}-volumes"
    when: (hive_safe_nfs_volumes | length) > 0
  - name: create another driver volume
    docker_volume:
      name: "{{ hostvars[item].hive_volume.name }}"
      driver: "{{ hostvars[item].hive_volume.driver }}"
      driver_options: "{{ hostvars[item].hive_volume.dirver_options | default(omit) }}"
      state: "{% if hive_destroy  | default(false) %}absent{% else %}present{% endif %}"
    loop: "{{ hive_safe_volumes }}"
    vars:
      ansible_python_interpreter: "{{ hive_home_dir }}/docker/bin/python"
  # - import_role:
      # name: reboot
