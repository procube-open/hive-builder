name: auto versioning for main branch
on:
  push:
    tags-ignore: 
      - '**'
    branches:
      - main
jobs:
  version-up-main:
    runs-on: ubuntu-latest
    env:
      # https://github.community/t/github-action-trigger-on-release-not-working-if-releases-was-created-by-automation/16559
      GITHUB_USER: ${{ secrets.EXT_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.EXT_GITHUB_PAT }}
      RELEASE_IT_VERSION: 14.14.0
      BUMPER_VERSION: 3.0.1
    steps:
      - name: Check out codes
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.EXT_GITHUB_PAT }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Set releaser settings
        run: |
          git config --global user.name ${{ secrets.EXT_GITHUB_USER }}
          git config --global user.email ${{ secrets.EXT_GITHUB_EMAIL }}
      # バージョン更新コミットは対象外
      - name: Patch release
        if: "!contains(toJSON(github.event.commits.*.message), '[automate_versioning] Release')"
        run: |
          echo 'UPDATE_ARGS=patch' >> $GITHUB_ENV
      - name: Minor release
        if: contains(toJSON(github.event.commits.*.message), '[[MINOR]]')
        run: |
          echo 'UPDATE_ARGS=minor' >> $GITHUB_ENV
      - name: Major release
        if: contains(toJSON(github.event.commits.*.message), '[[MAJOR]]')
        run: |
          echo 'UPDATE_ARGS=major' >> $GITHUB_ENV
      - name: Release
        if: "env.UPDATE_ARGS != ''"
        run: |
          RELEASE_VERSION=$(poetry version -s ${{ env.UPDATE_ARGS }}
          git add pyproject.toml
          git commit -m "[automate_versioning_prerelease] Prerelease ${RELEASE_VERSION}"
          git tag ${RELEASE_VERSION}
          git push origin ${RELEASE_VERSION}
